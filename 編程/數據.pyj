import random
rd = random.randint

import re
import 配置

def 加权抽取(li,wei):
    total_weight=sum(wei)
    p=random.uniform(0,total_weight)
    for i in range(len(li)):
        p-=wei[i]
        if p<0:
            return li[i]
            
class set(Array):
    def add(self,x):
        self.push(x)
    def remove(self,dx):
        for i in range(len(self)):
            if self[i]==dx:
                self=self[:i].concat(self[3:])
                break
                
class Data():
    def __init__(self,單詞表):
        self.單詞表=單詞表
        
        self.例句字典=例句
        
        R=配置.隨機種子
        x=0
        for i in self.單詞表:
            x+=0.45
            R=(R*1.23+x)%7
            i['特徵']=R
        def _(a,b):
            return a['特徵']-b['特徵']
        self.單詞表.sort(_)
        #————————————————————————————
        #读入被切过的单词
        self.切過的詞={}
        self.切詞同步()
        #————————————————————————————
        #生成缓冲区
        self.緩衝區=set()
        self.緩衝區尾=0
        self.填滿緩衝區()
        
        #————————————————————————————
        #填充权
        for i in self.單詞表:
            i['权']=1
            
            

    def 填滿緩衝區(self):
        while len(self.緩衝區)<配置.缓冲区大小 and self.緩衝區尾<len(self.單詞表):
            if not self.切過了(self.緩衝區尾):
                self.緩衝區.add(self.緩衝區尾)
            self.緩衝區尾+=1

    #切掉上一个单词
    def 前切(self):
        前詞 = self.單詞表[self.之前詞位置]
        self.切過的詞[前詞['假名']+' '+前詞['寫法']]=1
        self.緩衝區.remove(self.之前詞位置)
        self.填滿緩衝區()

    def 切詞存檔(self):
        $.cookie('切詞', JSON.stringify(self.切過的詞), { expires: 9999999 });
       
    def 切詞同步(self):
        try:
            self.切過的詞 = JSON.parse($.cookie('切詞'))
        except:
            print('同步失敗') 
            
    def 处理例句(self,句):
        if type(句)=='String':
            pattern=re.compile(r'^.*?[^<]/')
            a=pattern.findall(句)
            if a:
                a=a[0]
            else:
                return
            b=句[len(a):-1]
            句=['','']
            句[0]=a[0:-1]
            句[1]=b
            
        if type(句)=='Array':
            return 句[0] + '<br/><span class="例句中文">'+句[1]+'</span>'

    def 生成問題(self):
        組={}
        
        try:
            self.之前詞位置=self.當前詞位置
        except:
            self.之前詞位置=-1
        while True:
            li=self.緩衝區
            self.當前詞位置=加权抽取(li,[self.單詞表[i]['权'] for i in li])    #取buff中的一个下标
            if len(self.緩衝區)==1:  break
            if self.當前詞位置!=self.之前詞位置: break
        self.單詞表[self.當前詞位置]['权']*=配置.確率調整
        self.單詞表[self.當前詞位置]['权']=min(max(self.單詞表[self.當前詞位置]['权'],配置.確率範圍[0]),配置.確率範圍[1])
        
        組['正解'] = self.單詞表[self.當前詞位置]
        
        the_spell = 組['正解']['寫法']
        if the_spell in self.例句字典 and len(self.例句字典[the_spell])>0:
            例句=self.处理例句(random.choice(self.例句字典[the_spell]))
        else:
            例句='没抓到2333'
        組['例句']=例句
        
        for i in range(3):
            組[i] = self.單詞表[rd(0,len(self.單詞表)-1)]
        return 組

    def 生成背景詞(self):
        詞列=[]
        s=set()
        for i in range(1,100):
            s.add(rd(0,len(self.單詞表)-1))
        for i in s:
            詞列.append({'字':self.單詞表[i]['寫法'],'top':rd(-100,800),'left':rd(-100,1400),'透明度':rd(5,20)/100,'字號':rd(13,30)})
        return 詞列
    
    def 切過了(self,x):
        return self.單詞表[x]['假名']+' '+self.單詞表[x]['寫法'] in self.切過的詞